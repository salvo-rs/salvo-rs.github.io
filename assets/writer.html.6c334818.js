import{_ as s,o as n,c as a,e as l}from"./app.3f2e9511.js";const e={},o=l(`<h1 id="writer" tabindex="-1"><a class="header-anchor" href="#writer" aria-hidden="true">#</a> Writer</h1><p><code>Writer</code> 用于写入内容到 <code>Response</code>:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[async_trait]</span></span>
<span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">trait</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Writer</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于 Handler:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[async_trait]</span></span>
<span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">trait</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Handler</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Send</span><span style="color:#D4D4D4;"> + </span><span style="color:#4EC9B0;">Sync</span><span style="color:#D4D4D4;"> + &#39;</span><span style="color:#4EC9B0;">static</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">handle</span><span style="color:#D4D4D4;">(&amp;</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ctrl</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">FlowCtrl</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他们直接的差别在于:</p><ul><li>用途不一样, <code>Writer</code> 代表将具体的内容写入 <code>Response</code>, 由具体的内容实现, 比如字符串, 错误信息等. 而 <code>Handler</code> 是用于处理整个请求的.</li><li><code>Writer</code> 是在 <code>Handler</code> 中被创建, 会在 <code>write</code> 函数调用时消耗自身, 是一次性调用. 而 <code>Handler</code> 是所有请求公用的;</li><li><code>Writer</code> 可以作为 <code>Handler</code> 的返回的 <code>Result</code> 中的内容;</li><li><code>Writer</code> 中不存在 <code>FlowCtrl</code> 参数, 无法控制整个请求的执行流程.</li></ul><p><code>Piece</code> 实现了 <code>Writer</code>, 但是比 <code>Writer</code> 能实现的功能更少:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">trait</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Piece</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Piece</code> 的渲染函数只是写入数据到 <code>Response</code>中, 这个过程是无法从 <code>Request</code> 或者 <code>Depot</code> 中获取信息的.</p>`,10),p=[o];function c(r,D){return n(),a("div",null,p)}const i=s(e,[["render",c],["__file","writer.html.vue"]]);export{i as default};
