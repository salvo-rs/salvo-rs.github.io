import{_ as l,r as p,o,c as e,b as n,d as s,a as r,w as D,e as c}from"./app.3f2e9511.js";const t={},i=c(`<h1 id="錯誤處理" tabindex="-1"><a class="header-anchor" href="#錯誤處理" aria-hidden="true">#</a> 錯誤處理</h1><h2 id="rust-應用中的常規錯誤處理方式" tabindex="-1"><a class="header-anchor" href="#rust-應用中的常規錯誤處理方式" aria-hidden="true">#</a> Rust 應用中的常規錯誤處理方式</h2><p>Rust 的錯誤處理不同於 Java 等語言, 它沒有 <code>try...catch</code> 這種玩意, 正常的做法是在應用程序層面定義全局的錯誤處理類型:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">use</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">thiserror</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Error</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Error</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">enum</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AppError</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[error(</span><span style="color:#CE9178;">&quot;io: \`{0}\`&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">Io</span><span style="color:#D4D4D4;">(#[</span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">] </span><span style="color:#4EC9B0;">io</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Error</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[error(</span><span style="color:#CE9178;">&quot;utf8: \`{0}\`&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">FromUtf8</span><span style="color:#D4D4D4;">(#[</span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">] </span><span style="color:#4EC9B0;">FromUtf8Error</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[error(</span><span style="color:#CE9178;">&quot;diesel: \`{0}\`&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">Diesel</span><span style="color:#D4D4D4;">(#[</span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">] </span><span style="color:#4EC9B0;">diesel</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">result</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Error</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AppResult</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">Result</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">AppError</span><span style="color:#D4D4D4;">&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這裏使用了 <code>thiserror</code> 這個庫, 它可以方便地定義你自己的自定義錯誤類型, 簡化代碼. 為了簡單書寫, 順便定義一個 <code>AppResult</code>.</p><h2 id="handler-中的錯誤處理" tabindex="-1"><a class="header-anchor" href="#handler-中的錯誤處理" aria-hidden="true">#</a> Handler 中的錯誤處理</h2><p>在 Salvo 中, <code>Handler</code> 也經常會遇到各式錯誤, 比如: 數據庫連接錯誤, 文件訪問錯誤, 網絡連接錯誤等等. 對於這個類型的錯誤, 可以采用上述的錯誤處理手法:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">home</span><span style="color:#D4D4D4;">()-&gt; </span><span style="color:#4EC9B0;">AppResult</span><span style="color:#D4D4D4;">&lt;()&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這裏的 <code>home</code> 就直接返回了一個 <code>AppResult&lt;()&gt;</code>. 但是, 這個錯誤改如何顯示呢? 我們需要為 <code>AppResult</code> 這個自定義錯誤類型實現 <code>Writer</code>, 在這個實現中我們可以決定如何顯示錯誤:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[async_trait]</span></span>
<span class="line"><span style="color:#569CD6;">impl</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Writer</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AppError</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Text</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Plain</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;I&#39;m a error, hahaha!&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Errror</code> 中往往包含一些敏感信息, 一般情況下, 並不想被普通用戶看到, 那樣也太不安全了, 一點點隱私也沒有了. 但是, 如果你是開發人員或者網站管理員, 或許想法就不一樣了, 你希望錯誤能把外衣脫得光光的, 讓你看到最真實的錯誤信息.</p><p>可以看到, <code>write</code> 的方法中, 我們其實是可以拿到 <code>Request</code> 和 <code>Depot</code> 的引用的, 這就可以很方便地實現上面的騷操作了:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[async_trait]</span></span>
<span class="line"><span style="color:#569CD6;">impl</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Writer</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AppError</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">obtain</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.is_admin {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Text</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Plain</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">to_string</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Text</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Plain</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;I&#39;m a error, hahaha!&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="錯誤頁面的顯示" tabindex="-1"><a class="header-anchor" href="#錯誤頁面的顯示" aria-hidden="true">#</a> 錯誤頁面的顯示</h2><p>Salvo 中自帶的錯誤頁面在絕大部分情況下是滿足需求的, 它可以根據請求的數據類型, 顯示 Html, Json 或者 Xml 頁面. 然而, 某些情況下, 我們依然期望自定義錯誤頁面的顯示.</p>`,15),y=n("code",null,"Catcher",-1),d=n("code",null,"Catcher",-1);function C(u,v){const a=p("RouterLink");return o(),e("div",null,[i,n("p",null,[s("這個可以通過自定義 "),y,s(" 實現. 詳細的介紹可以查看 "),r(a,{to:"/zh-hant/book/core/catcher/"},{default:D(()=>[d]),_:1}),s(" 部分的講解.")])])}const E=l(t,[["render",C],["__file","handle-error.html.vue"]]);export{E as default};
