import{_ as o,r as p,o as r,c as t,b as a,d as s,a as e,e as l}from"./app.3f2e9511.js";const c={},D=l(`<h1 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h1><p>For web applications itâ€™s crucial to react to the data a client sends to the server. In Salvo this information is provided by the request:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hello</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">params</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">cloned</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap_or_default</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="about-query-string" tabindex="-1"><a class="header-anchor" href="#about-query-string" aria-hidden="true">#</a> About query string</h2><p>We can get query string from request object:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">query</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="about-form" tabindex="-1"><a class="header-anchor" href="#about-form" aria-hidden="true">#</a> About form</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">form</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="about-json-payload" tabindex="-1"><a class="header-anchor" href="#about-json-payload" aria-hidden="true">#</a> About json payload</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_json</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt;().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="extract-data" tabindex="-1"><a class="header-anchor" href="#extract-data" aria-hidden="true">#</a> Extract Data</h2><p>Request can be parsed into strongly typed structures by providing several functions through <code>Request</code>.</p><ul><li><code>parse_params</code>: parse the requested router params into a specific data type;</li><li><code>parse_queries</code>: parse the requested URL queries into a specific data type;</li><li><code>parse_headers</code>: parse the requested HTTP haders into a specific data type;</li><li><code>parse_json</code>: Parse the data in the HTTP body part of the request as JSON format to a specific type;</li><li><code>parse_form</code>: Parse the data in the HTTP body part of the request as a Form form to a specific type;</li><li><code>parse_body</code>: Parse the data in the HTTP body section to a specific type according to the type of the requested <code>content-type</code>.</li><li><code>extract</code>: can combine different data sources to parse a specific type.</li></ul><h2 id="parsing-principle" tabindex="-1"><a class="header-anchor" href="#parsing-principle" aria-hidden="true">#</a> Parsing principle</h2><p>The customized <code>serde::Deserializer</code> will be extract data similar to <code>HashMap&lt;String, String&gt;</code> and <code>HashMap&lt;String, Vec&lt;String&gt;&gt;</code> into a specific data type.</p>`,15),i=a("code",null,"URL queries",-1),d={href:"https://docs.rs/multimap/latest/multimap/struct.MultiMap.html",target:"_blank",rel:"noopener noreferrer"},y=a("code",null,"MultiMap",-1),u=a("code",null,"HashMap<String, Vec<String>>",-1),C=a("code",null,"http://localhost/users?id=123&id=234",-1),v=l(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then the first <code>id=123</code> will be parsed, and <code>id=234</code> will be discarded:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_queries</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.id, </span><span style="color:#B5CEA8;">123</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If the type we provide is:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Users</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then <code>id=123&amp;id=234</code> will be parsed:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">users</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Users</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_queries</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.ids, </span><span style="color:#DCDCAA;">vec!</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">123</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">234</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Multiple data sources can be merged to parse out a specific type. You can define a custom type first, for example:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#6A9955;">/// Get the data field value from the body by default.</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">    /// The id number is obtained from the request path parameter, and the data is automatically parsed as i64 type.</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">    /// Reference types can be used to avoid memory copying.</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then in <code>Handler</code> you can get the data like this:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">edit</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">_</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">extract</span><span style="color:#D4D4D4;">().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even pass the type directly to the function as a parameter, like this:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">edit</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Json</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is considerable flexibility in the definition of data types, and can even be resolved into nested structures as needed:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">, format = </span><span style="color:#CE9178;">&quot;json&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;query&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">lovers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#6A9955;">    /// The nested field is completely reparsed from Request.</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;request&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">nested</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Nested</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">, format = </span><span style="color:#CE9178;">&quot;json&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Nested</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;query&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(rename = </span><span style="color:#CE9178;">&quot;lovers&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[serde(default)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),m={href:"https://github.com/salvo-rs/salvo/blob/main/examples/extract-nested/src/main.rs",target:"_blank",rel:"noopener noreferrer"};function b(E,h){const n=p("ExternalLinkIcon");return r(),t("div",null,[D,a("p",null,[s("For example: "),i,s(" is actually extracted as a "),a("a",d,[s("MultiMap"),e(n)]),s(" type, "),y,s(" can think of it as a data structure like "),u,s(". If the requested URL is "),C,s(", we provide The target type is:")]),v,a("p",null,[s("For specific examples, see: "),a("a",m,[s("extract-nested"),e(n)]),s(".")])])}const f=o(c,[["render",b],["__file","request.html.vue"]]);export{f as default};
