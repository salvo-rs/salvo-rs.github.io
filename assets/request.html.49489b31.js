import{_ as o,r as p,o as r,c,b as n,d as s,a as l,e}from"./app.3f2e9511.js";const D={},t=e(`<h1 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h1><p>在 Salvo 中可以通过 <code>Request</code> 获取用户请求的数据:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hello</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">params</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">cloned</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap_or_default</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取查询参数" tabindex="-1"><a class="header-anchor" href="#获取查询参数" aria-hidden="true">#</a> 获取查询参数</h2><p>可以通过 <code>get_query</code> 获取查询参数:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">query</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="获取-form-数据" tabindex="-1"><a class="header-anchor" href="#获取-form-数据" aria-hidden="true">#</a> 获取 Form 数据</h2><p>可以通过 <code>get_form</code> 获取查询参数, 此函数为异步函数:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">form</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="获取-json-反序列化数据" tabindex="-1"><a class="header-anchor" href="#获取-json-反序列化数据" aria-hidden="true">#</a> 获取 JSON 反序列化数据</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_json</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt;().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="提取-request-数据" tabindex="-1"><a class="header-anchor" href="#提取-request-数据" aria-hidden="true">#</a> 提取 Request 数据</h2><p><code>Request</code> 提供多个方法将这些数据解析为强类型结构.</p><ul><li><code>parse_params</code>: 将请求的 router params 解析为特定的数据类型;</li><li><code>parse_queries</code>: 将请求的 URL queries 解析为特定的数据类型;</li><li><code>parse_headers</code>: 将请求的 HTTP headers 解析为特定的数据类型;</li><li><code>parse_json</code>: 将请求的 HTTP body 部分的数据当作 JSON 格式解析到特定的类型;</li><li><code>parse_form</code>: 将请求的 HTTP body 部分的数据当作 Form 表单解析到特定的类型;</li><li><code>parse_body</code>: 根据请求的 <code>content-type</code> 的类型, 将 HTTP body 部分的数据解析为特定类型.</li><li><code>extract</code>: 可以合并不同的数据源解析出特定的类型.</li></ul><h2 id="解析原理" tabindex="-1"><a class="header-anchor" href="#解析原理" aria-hidden="true">#</a> 解析原理</h2><p>此处通过自定义的 <code>serde::Deserializer</code> 将类似 <code>HashMap&lt;String, String&gt;</code> 和 <code>HashMap&lt;String, Vec&lt;String&gt;&gt;</code> 的数据提取为特定的数据类型.</p>`,16),i=n("code",null,"URL queries",-1),d={href:"https://docs.rs/multimap/latest/multimap/struct.MultiMap.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"MultiMap",-1),u=n("code",null,"HashMap<String, Vec<String>>",-1),C=n("code",null,"http://localhost/users?id=123&id=234",-1),v=e(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则第一个 <code>id=123</code> 会被解析, <code>id=234</code> 则被丢弃:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_queries</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.id, </span><span style="color:#B5CEA8;">123</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们提供的类型是:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Users</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则 <code>id=123&amp;id=234</code> 都会被解析:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">users</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Users</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse_queries</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.ids, </span><span style="color:#DCDCAA;">vec!</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">123</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">234</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以合并多个数据源, 解析出特定类型, 可以先定义一个自定义的类型, 比如:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#6A9955;">/// 默认从 body 中获取数据字段值</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">    /// 其中, id 号从请求路径参数中获取, 并且自动解析数据为 i64 类型.</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">    /// 可以使用引用类型, 避免内存复制.</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>Handler</code> 中可以这样获取数据:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">edit</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">_</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">extract</span><span style="color:#D4D4D4;">().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至于可以直接把类型作为参数传入函数, 像这样:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">edit</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Json</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">good_man</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据类型的定义有相当大的灵活性, 甚至可以根据需要解析为嵌套的结构:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">, format = </span><span style="color:#CE9178;">&quot;json&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GoodMan</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;query&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">lovers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#6A9955;">    /// 这个 nested 字段完全是从 Request 重新解析.</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;request&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">nested</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Nested</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[derive(</span><span style="color:#4EC9B0;">Serialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Deserialize</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Extractible</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Debug</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">#[extract(default_source(from = </span><span style="color:#CE9178;">&quot;body&quot;</span><span style="color:#D4D4D4;">, format = </span><span style="color:#CE9178;">&quot;json&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Nested</span><span style="color:#D4D4D4;">&lt;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;param&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">i64</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(source(from = </span><span style="color:#CE9178;">&quot;query&quot;</span><span style="color:#D4D4D4;">))]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">: &amp;&#39;</span><span style="color:#4EC9B0;">a</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">first_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">last_name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[extract(rename = </span><span style="color:#CE9178;">&quot;lovers&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    #[serde(default)]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">pets</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),m={href:"https://github.com/salvo-rs/salvo/blob/main/examples/extract-nested/src/main.rs",target:"_blank",rel:"noopener noreferrer"};function E(b,h){const a=p("ExternalLinkIcon");return r(),c("div",null,[t,n("p",null,[s("比如: "),i,s(" 实际上被提取为一个 "),n("a",d,[s("MultiMap"),l(a)]),s(" 类型, "),y,s(" 可以认为就是一个类似 "),u,s(" 的数据结构. 如果请求的 URL 是 "),C,s(", 我们提供的目标类型是:")]),v,n("p",null,[s("具体实例参见: "),n("a",m,[s("extract-nested"),l(a)]),s(".")])])}const B=o(D,[["render",E],["__file","request.html.vue"]]);export{B as default};
