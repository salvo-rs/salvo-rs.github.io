import{_ as s,o as n,c as a,e}from"./app.3f2e9511.js";const o={},l=e(`<h1 id="depot" tabindex="-1"><a class="header-anchor" href="#depot" aria-hidden="true">#</a> Depot</h1><p>Depot is used to save data when process current request. It is useful for middlewares to share data.</p><p>A depot instance created when server get a request from client. The depot will dropped when all process for this request done.</p><p>For example, we can set <code>current_user</code> in <code>set_user</code>, and then use this value in the following middlewares and handlers.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">use</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">salvo</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">prelude</span><span style="color:#D4D4D4;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">set_user</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">)  {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;current_user&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Elon Musk&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">home</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#6A9955;">  // Notic: Don&#39;t use String here, because you inserted a &amp;str.</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">::&lt;&amp;</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;current_user&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">copied</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">format!</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hey {}, I love your money and girls!&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[tokio::main]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Router</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">with_hoop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">set_user</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">home</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">acceptor</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TcpListener</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;127.0.0.1:7878&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">; </span><span style="color:#4EC9B0;">Server</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">acceptor</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">serve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">).</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-and-retrieve-data-via-insert-and-get" tabindex="-1"><a class="header-anchor" href="#set-and-retrieve-data-via-insert-and-get" aria-hidden="true">#</a> Set and retrieve data via <code>insert</code> and <code>get</code></h2><p>As shown above, <code>key</code> and <code>value</code> can be inserted into <code>Depot</code> via <code>insert</code>. For values of this type, <code>get</code> can be used to retrieve them directly.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;a&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;b&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">::&lt;&amp;</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;a&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">copied</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">(), </span><span style="color:#CE9178;">&quot;b&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns <code>None</code> if the <code>key</code> does not exist, or if the <code>key</code> exists, but the types do not match.</p><h2 id="set-and-retrieve-data-via-inject-and-obtain" tabindex="-1"><a class="header-anchor" href="#set-and-retrieve-data-via-inject-and-obtain" aria-hidden="true">#</a> Set and retrieve data via <code>inject</code> and <code>obtain</code></h2><p>Sometimes, there are cases where you don&#39;t need a relation-specific <code>key</code>, and there is also a unique instance of that type. You can use <code>inject</code> to inject data, and <code>obtain</code> to get data out. They don&#39;t require you to provide a <code>key</code>.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">inject</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">obtain</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=[l];function t(r,D){return n(),a("div",null,p)}const i=s(o,[["render",t],["__file","depot.html.vue"]]);export{i as default};
