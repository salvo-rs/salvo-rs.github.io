import{_ as s,o as n,c as a,e as l}from"./app.3f2e9511.js";const p={},o=l(`<h1 id="catcher" tabindex="-1"><a class="header-anchor" href="#catcher" aria-hidden="true">#</a> Catcher</h1><p><code>Catcher</code> 是用於處理頁面返回 HTTP 狀態碼為錯誤的情況下, 如何顯示頁面的抽象.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">trait</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Catcher</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Send</span><span style="color:#D4D4D4;"> + </span><span style="color:#4EC9B0;">Sync</span><span style="color:#D4D4D4;"> + &#39;</span><span style="color:#4EC9B0;">static</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(&amp;</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一個網站應用可以指定多個不同的 Catcher 對象處理錯誤. 它們被保存在 Service 的字段中:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Service</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">crate</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Arc</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Router</span><span style="color:#D4D4D4;">&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">crate</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">catchers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Arc</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Box</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">dyn</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Catcher</span><span style="color:#D4D4D4;">&gt;&gt;&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">pub</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">crate</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">allowed_media_types</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Arc</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Mime</span><span style="color:#D4D4D4;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通過 <code>Server</code> 的 <code>with_catchers</code> 函數設置它們:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Handle404</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">impl</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Catcher</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Handle404</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(&amp;</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_req</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#4EC9B0;">Request</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Some</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">StatusCode</span><span style="color:#D4D4D4;">::NOT_FOUND) = </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">status_code</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Custom 404 Error Page&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">#[tokio::main]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Router</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">hello_world</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">catchers</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Vec</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Box</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">dyn</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Catcher</span><span style="color:#D4D4D4;">&gt;&gt; = </span><span style="color:#DCDCAA;">vec!</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Box</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Handle404</span><span style="color:#D4D4D4;">)];</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">service</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Service</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">with_catchers</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">catchers</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Server</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">TcpListener</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;0.0.0.0:7878&quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">serve</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">service</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>當網站請求結果有錯誤時, 首先試圖通過用戶自己設置的 <code>Catcher</code> 設置錯誤頁面, 如果 <code>Catcher</code> 捕獲錯誤, 則返回 <code>true</code>.</p><p>如果您自己設置的 <code>Catcher</code> 都沒有捕獲這個錯誤, 則系統使用默認的 <code>Catcher</code> 實現 <code>CatcherImpl</code> 捕獲處理錯誤, 發送默認的錯誤頁面. 默認的錯誤實現 <code>CatcherImpl</code> 支持以 <code>XML</code>, <code>JSON</code>, <code>HTML</code>, <code>Text</code> 格式發送錯誤頁面.</p>`,9),e=[o];function D(c,r){return n(),a("div",null,e)}const y=s(p,[["render",D],["__file","catcher.html.vue"]]);export{y as default};
