import{_ as s,o as n,c as a,e as l}from"./app.3f2e9511.js";const o={},e=l(`<h1 id="depot" tabindex="-1"><a class="header-anchor" href="#depot" aria-hidden="true">#</a> Depot</h1><p>Depot 是用于保存一次请求中涉及到的临时数据. 中间件可以将自己处理的临时数据放入 Depot, 供后续程序使用.</p><p>当一个服务器接收到一个客户浏览器发来的请求后会创建一个 <code>Depot</code> 的实例. 这个实例会在所有的中间件和 <code>Handler</code> 处理完请求后被销毁.</p><p>比如说, 我们可以在登录的中间件中设置 <code>current_user</code>, 然后在后续的中间件或者 <code>Handler</code> 中读取当前用户信息.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">use</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">salvo</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">prelude</span><span style="color:#D4D4D4;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">set_user</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">)  {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;current_user&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Elon Musk&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">#[handler]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">home</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">: &amp;</span><span style="color:#569CD6;">mut</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Depot</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#6A9955;">  // 需要注意的是, 这里的类型必须是 &amp;str, 而不是 String, 因为当初存入的数据类型为 &amp;str.</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">::&lt;&amp;</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;current_user&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">copied</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">format!</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hey {}, I love your money and girls!&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">#[tokio::main]</span></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fn</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Router</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">with_hoop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">set_user</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">home</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">acceptor</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">TcpListener</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;127.0.0.1:7878&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">().</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">; </span><span style="color:#4EC9B0;">Server</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">acceptor</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">serve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">router</span><span style="color:#D4D4D4;">).</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过-insert-和-get-设置和取出数据" tabindex="-1"><a class="header-anchor" href="#通过-insert-和-get-设置和取出数据" aria-hidden="true">#</a> 通过 <code>insert</code> 和 <code>get</code> 设置和取出数据</h2><p>正如上面所示, 可以通过 <code>insert</code> 把 <code>key</code> 和 <code>value</code> 插入到 <code>Depot</code> 中. 对于这一类型的值, 直接用 <code>get</code> 取出.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;a&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;b&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">assert_eq!</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">::&lt;&amp;</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;a&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">copied</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">unwrap</span><span style="color:#D4D4D4;">(), </span><span style="color:#CE9178;">&quot;b&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不存在这个 <code>key</code>, 或者 <code>key</code> 存在, 但是类型不匹配, 则返回 <code>None</code>.</p><h2 id="通过-inject-和-obtain-设置和取出数据" tabindex="-1"><a class="header-anchor" href="#通过-inject-和-obtain-设置和取出数据" aria-hidden="true">#</a> 通过 <code>inject</code> 和 <code>obtain</code> 设置和取出数据</h2><p>有时, 存在一些不需要关系具体 <code>key</code>, 对于这种类型也存在唯一实例的情况. 可以使用 <code>inject</code> 插入数据, 然后使用 <code>obtain</code> 取出数据. 它们不需要你提供 <code>key</code>.</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">inject</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">new</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#9CDCFE;">depot</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">obtain</span><span style="color:#D4D4D4;">::&lt;</span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=[e];function D(c,t){return n(),a("div",null,p)}const i=s(o,[["render",D],["__file","depot.html.vue"]]);export{i as default};
